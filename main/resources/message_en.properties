
addVertex = Add vertex
addEdge = Add edge
algorithmDescription = Algorithm description
algorithms = Algorithms
animate = Animate
animationSpeed = Animation speed
backStep = Step back
burrowsWheelerMatrix = Burrows-Wheeler matrix
bwt = Burrows-Wheeler transform
bwtDecode = Inverse of Burrows-Wheeler transform
bwtDecodeAlg1 =C array initialization. It's length equals the size of the alphabet. For simplicity, C-array is indexed \
  both by characters of alphabet and integers (C[i] = C[i-th smallest character of alphabet])
bwtDecodeAlg2First = Counting occurrences of character by scanning input string in cycle.
bwtDecodeAlg2Positive = i is smaller than n. The body of cycle will be executed.
bwtDecodeAlg2Negative = i equals n. Now, each element of C-array stores occurrence of respective character. Program \
  will continue after cycle
bwtDecodeAlg3 = Incrementing the value of C[L[i]]
bwtDecodeAlg4 = Declaration of variable sum, and initialization it to 0
bwtDecodeAlg5First = Enumerating values of C-array. For every character but the lowest one, this equation holds: C[c] = \
  C[c - 1] + occurrence of c in string. This is used in enumeration of C, using already calculated occurrences of \
  individual characters.
bwtDecodeAlg5Positive = i is smaller than σ. The body of cycle will be executed.
bwtDecodeAlg5Negative = i equals σ. Now, each element of C-array stores sum of occurrences of lower characters than \
  respective index
bwtDecodeAlg6 = Storing value of i-th character of C-array to temporary variable
bwtDecodeAlg7 = Setting value of i-th element of C-array to value of variable sum
bwtDecodeAlg8 = Increasing value of variable sum by value of variable tmp. Now, value of variable sum equals sum of \
  occurrences of characters, that are smaller/equals i-th character of alphabet
bwtDecodeAlg9 = LF array initialization. It's length equals n (the length of input string)
bwtDecodeAlg10First = Enumerating values of LF-array. For every element with index i, it's value equals C[L[i]] + \
  L.rank(L[i], i). We already know C[L[i]] for every L[i], now we need to calculate rank. While scanning array from \
  beginning, we are finding for each given character it's occurrences in string L. We know, that value L.rank(L[i], i) \
  equals number of previous occurrences. If we remember for each character this number, we can calculate value LF[i]. \
  It is not necessary to create new array for values of previous occurrences, we can use C-array, in which we will store \
  sum of previous occurrences and number of occurrences of smaller characters.
bwtDecodeAlg10Positive = i is smaller than n. The body of cycle will be executed
bwtDecodeAlg10Negative = i equals n. Now, LF-array is filled by definition of LF-mapping
bwtDecodeAlg11 = Setting value of i-th element of array LF to value of L[i]-th element of array C
bwtDecodeAlg12 = Incrementing L[i]-th element of array C. This set correct value for next occurrence of character L[i]
bwtDecodeAlg13 = Initialization of string S. This string will store value of inverse Burrows-Wheeler transform. It's \
  length equals to n (length of input string)
bwtDecodeAlg14 = Setting the last character of string S to $
bwtDecodeAlg15 = Declaration of variable j and it's initialization to 0
bwtDecodeAlg16First = Every 2 characters, that are equal, and hava j-th occurrence in their respective strings, \
  represent the same character, on same position in S. LF-mapping represent connection between arrays L and F: L[i] = \
  F[LF[i]], and L[i] and F[LF[i]] have same occurrence in their respective strings. (Note: array F is colored gray, \
  because it is not stored, and is displayed only as a tool for visualizing LF mapping)
bwtDecodeAlg16Positive = i is greater/equal 0, the body of cycle will be executed
bwtDecodeAlg16Negative = i is smaller than 0. Now, array S stores final value of inverse transformation
bwtDecodeAlg17 = Setting of i-th element of string S to j-th element of string L
bwtDecodeAlg18 = Change of value of variable j using LF-mapping
bwtDecodeAlgEnd1 = End of algorithm. Inverse transformation for string
bwtDecodeAlgEnd2 = is string
bwtFromSAAlg1First = Enumerating Burrows-Wheeler transform using suffix array. Suffix array is composed of sorted \
  suffixes, BWT-matrix is composed of sorted rotations.  From this, the equality S[SA[i]] = F[i] applies. From the \
  fact that the BWT lines are composed of rotations, it holds that L[i] is immediately before F[i],or it is the last \
  and first character. Using this we can make BWT out of SA.
bwtFromSAAlg1Positive = i is smaller than n, the body of cycle will be executed
bwtFromSAAlg1Negative = i is equal to n. Now, array BWT stores result of transformation
bwtFromSAAlg2True = S[SA[i]] is not 0-th character, we can find character immediately before it
bwtFromSAAlg2False = S[SA[i]] is 0-th character, in rotation there is ending character before it
bwtFromSAAlg3 = Adding character before S[SA[i]] (S[SA[i] - 1]) into array BWT
bwtFromSAAlg5 = Adding ending character into array BWT
bwtFromSAAlgEnd = End of algorithm. Result of transformation is string
bwtSearchStart = n denote length of string, m length of pattern. Gray part of matrix is not stored, it is just tool \
  for visualization. 
bwtSearchAlg1 = Declaration of the variable top, and it's initialization to to 0. This variable indicates the beginning of the \
  interval in the suffix array in which the pattern can be found. We use semi-open intervals, the top position belongs \
  to the interval.
bwtSearchAlg2 = Declaration of the variable bottom, and its initialization to n (string length). This variable \
  indicates the end of the interval in the suffix array in which the pattern can be found. We use semi-open intervals, \
  and the bottom position no longer belongs to the given interval
bwtSearchAlg3First = Scanning the pattern string from the end, for each character, we find out where the pattern \
  suffix can begin. Since the rows of the Burrows-Wheeler matrix are rotations, we need to find out which positions in \
  the last column of the matrix (L) can be a continuation of the pattern. These can only be in rows where the previous \
  part of the pattern has already been found, and therefore only on those that are highlighted. We find out what \
  indexes have characters from given interval, which are the same as from the end of the i-th character of the pattern, \
  and from the properties of LF-mapping we then know on which new interval the extended pattern suffix is located.
bwtSearchAlg3Positive = i is greater than / equal to 0, the cycle body is executed. In the body of the cycle, the \
  index values of the next pattern character in the string L, which are at the highlighted interval, are determined
bwtSearchAlg3Negative = i is less than 0. Now the variables top and bottom indicate the interval at which the \
  positions of the beginnings of the pattern occurrences in the string are located in the suffix field
bwtSearchAlg4 = Loading the next character from the pattern
bwtSearchAlg5 = Change the value of the variable top, using the newly added pattern character
bwtSearchAlg6 = Change the value of the variable bottom, using the newly added pattern character
bwtSearchAlg7Positive = The variable top is greater than the variable bottom. Since they delimit a half-open interval, \
  it must now be empty, and pattern is not occurring in the string
bwtSearchAlg7Negative = The variable top is less than the variable bottom, the interval of possible solutions is \
  non-empty, and we can continue the algorithm. The Burrows-Wheeler matrix highlights characters that point to a \
  matching part of the pattern in the string
bwtSearchAlgEndNegative = End of algorithm, no occurrences found
bwtSearchAlgEndPositiveSg = End of algorithm. The occurrence of the pattern is in position
bwtSearchAlgEndPositivePl = End of algorithm. The occurrence of the pattern is in positions:

bwtIntroductionDescription = Definition of Burrows-Wheeler transform
BWTGeneralAlgorithmEnd = After sorting all rotations, the last column of matrix, denoted by L (colored red) is output \
  of transformation. In this case
BWTGeneralAlgorithmStart = In first step, all rotations (cyclic shifts) of input string are created, and stored in \
  matrix. These rotation are then lexicographically sorted
BWTMatrix = Burrows-Wheeler matrix
BWTUsingSA = BWT using suffix arrays
BWTUsingSADescription = Algorithm for performing Burrows-Wheeler transform using it's connection with suffix arrays.
checkWG = ?(Test for Wheeler)
compute = Compute
connectionWithWG = Connection with Wheeler graphs
createGraph = Create graph
createWGGraphDescription = Creating a graph by adding vertices and edges, testing whether a graph is a Wheeler graph, \
  and the ability to pass a graph for other algorithms.
decode = Decode
description = Description
edgeValue = Edge value
english = English
generalBWTEnd = ?
generalBWTFirstStep = ?
generalBWTIntroduction = ?
inputText = Input text
inputTextForAlgorithm = Input text for algorithm
introduction = Introduction
language = Language
memory = Memory
nextStep = Next step
pattern = Pattern
pseudocode = Pseudocode
retransform = Retransform
retransformation = Retransformation
retransformationBWTDescription = Algorithm for retransforming Burrows-Wheeler transform
retry = Retry
retryWithSameString = Retry with the same string
returnToWG = Return to Wheeler graph menu
returnToBWT = Return to BWT menu
sa = Suffix array
SAGeneralAlgorithmEnd1 = There are sorted suffixes in last column. Each suffix is unambiguously identifiable by it's \
  starting index. Therefore, only these starting indexes are needed to be saved, and this gives us suffix array SA, \
  displayed in third column. In this case
SAGeneralAlgorithmEnd2 = LCP-array (Longest Common Prefix) is associated with suffix arrays, which stores maximum common \
  prefix length between two consecutive suffixes (i-th position in LCP-array equals to longest common prefix of (i-1)th \
  and i-th element of suffix array). In this case
SAGeneralAlgorithmStart = In first step, all suffixes of input string are created. These rotations are then \
  lexicographically sorted.
searchInGraph = Search in graph
slovak = Slovak
sort = Sort
start = Start
startAlgorithm = Start algorithm
string = String
succinctRepresentation = Succinct representation
test = Test
transformGraph = Transform graph
tunnelGraph = Tunnel graph
tunneling = Tunneling
tunnelingDescription = Algorithm for Wheeler graph tunneling
vertex = Vertex
vertexFrom = Vertex from
vertexTo = Vertex to
wg = Wheeler graph

